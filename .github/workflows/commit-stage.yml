name: Commit Stage
on: push

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: leejiho1996/catalog-service
  VERSION: ${{github.sha}} # git commit hash와 동일한 버전으로 릴리스 후보 등록

#    env:
#      SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/catalogdb
#      SPRING_DATASOURCE_USERNAME: user
#      SPRING_DATASOURCE_PASSWORD: password

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-22.04
#    services:
#      postgres:
#        image: postgres:13
#        env:
#          POSTGRES_DB: catalogdb
#          POSTGRES_USER: user
#          POSTGRES_PASSWORD: password
#        options: >-
#          --health-cmd "pg_isready -U test"
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#        ports:
#          - 5432:5432
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4  # 현재 깃 저장소 체크아웃
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: gradle
      - name: Build, unit tests and integration tests
        run: |
            chmod +x gradlew
            ./gradlew build
      - name: Code vulnerability scanning
        uses: anchore/scan-action@v4 # 그라이프를 이용해 스캔
        id: scan # 현재 단계의 식별자를 할당하고 이후의 단계에서 참고 가능
        with:
          path: "${{ github.workspace }}" # 체크아웃 저장소 경로
          fail-build: false # 보안 취약성 발견시 빌드 실패 여부
          severity-cutoff: high # 보안 유형
      - name: Upload vulnerability report
        uses: github/codeql-action/upload-sarif@v3 # 깃허브로 보안 취약성 리포트 전송
        if: success() || failure() # 이전 단계가 실패해도 전송
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
      # 쿠버네티스 manifest 유효성 검사
      - name: Setup tools
        uses: alexellis/setup-arkade@v3
      - name: Install tools
        uses: alexellis/arkade-get@master
        with:
          kubeconform: latest
      - name: Validate Kubernetes manifests
        run: |
          kustomize build k8s | kubeconform --strict -

  package:
    name: Package and Publish
    if: ${{ github.ref == 'refs/heads/main' }} # main 브랜치에 대해서만 실행
    needs: [ build ] # build job이 성공했을 때만 실행
    runs-on: ubuntu-22.04
    permissions:
      contents: read
      packages: write
      security-events: write # 깃허브로 보안 이벤트를 제출하기 위한 권한
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: gradle
      - name: Build container image # 스프링 빌드팩을 이용해 빌드
        run: |
          chmod +x gradlew
          ./gradlew bootBuildImage \
            --imageName ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
      - name: OCI image vulnerability scanning
        uses: anchore/scan-action@v3 # 취약성 검사를 위해 스캐닝
        id: scan
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          fail-build: false # 취약성이 발견되도 빌드실패 x
          severity-cutoff: high
      - name: Upload vulnerability report
        uses: github/codeql-action/upload-sarif@v3
        if: success() || failure()
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
      - name: Log into container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }} # 현재 사용자
          password: ${{ secrets.GITHUB_TOKEN }} # 엑세스 토큰
      - name: Publish container image
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
      - name: Publish container image(latest) # 앞선 image 에 latest 태그를 붙혀 push
        run : |
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }} \ 
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
