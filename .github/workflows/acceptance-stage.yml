name: Acceptance Stage

on:
  workflow_run: # 커밋 단계가 끝나면 실행된다
    workflows: ['Commit Stage']
    types: [completed]
    branches: main # 메인 브랜치에서 실행
concurrency: acceptance # 한 번에 하나의 워크플로만 실행 (여러개의 릴리스 후보가 큐에 있을 때, 최신 릴리스 후보만 검증하도록 한다)

env:
  OWNER: leejiho1996
  REGISTRY: ghcr.io
  APP_REPO: catalog-service
  DEPLOY_REPO: polar-deployment
  VERSION: ${{ github.sha }}

jobs:
  functional:
    name: Functional Acceptance Tests
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-22.04
    steps:
      - run: echo "Running functional acceptance tests" # 단순 메시지만 출력
  performance:
    name: Performance Tests
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-22.04
    steps:
      - run: echo "Running performance tests" # 단순 메시지만 출력
  security:
    name: Security Tests
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-22.04
    steps:
      - run: echo "Running security tests" # 단순 메시지만 출력
  deliver:
    name: Deliver release candidate to production
    needs: [ functional, performance, security ] # 해당 테스트들이 성공적으로 완료된 후에 실행
    runs-on: ubuntu-22.04
    steps:
      - name: Deliver application to production
        uses: peter-evans/repository-dispatch@v3 # 다른 저장소에서 워크플로를 시작하도록 이벤트를 보내는 action
        with:
          token: ${{ secrets.DISPATCH_TOKEN }} # 다른 저장소로 이벤트를 보낼 수 있도록 액션 권한을 위한 토큰
          repository: ${{ env.OWNER }}/${{ env.DEPLOY_REPO }} # 알릴 저장소
          event-type: app_delivery # 이벤트 식별을 위한 이름 (원하는 대로 명명 가능)
          # 다른 저장소로 보낼 메시지 페이로드. 다른 저장소에서 수행할 작업에 필요한 어떠한 것도 포함 가능
          client-payload: '{
              "app_image": "${{ env.REGISTRY }}/${{ env.OWNER }}/${{ env.APP_REPO }}",
              "app_name": "${{ env.APP_REPO }}",
              "app_version": "${{ env.VERSION }}"
            }'